#root log
log4j.rootLogger=DEBUG,FILE
log4j.appender.FILE.DatePattern='.'yyyy-MM-dd'.log'

#----------------------------------------------------------------------------------
## logs ##
log4j.logger.common.framework=DEBUG,DEFINE1
log4j.logger.innovate.service=DEBUG,DEFINE2
log4j.logger.innovate.web=DEBUG,DEFINE3
log4j.logger.innovate.wap=DEBUG,LZY4
log4j.logger.com.ibatis = INFO,IBATIS
log4j.logger.com.ibatis.common.jdbc.SimpleDataSource = DEBUG
log4j.logger.com.ibatis.common.jdbc.ScriptRunner = DEBUG
log4j.logger.com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate = DEBUG
log4j.logger.java.sql.Connection = DEBUG
log4j.logger.java.sql.Statement = DEBUG
log4j.logger.java.sql.PreparedStatement =INFO,IBATIS



#-------------------------------------------------------------------------------
### DEFINE1 ###
log4j.appender.DEFINE1=org.apache.log4j.DailyRollingFileAppender
log4j.appender.DEFINE1.File=logs/common.framework.log
log4j.appender.DEFINE1.DatePattern = '.'yyyy-MM-dd'.log'
log4j.appender.DEFINE1.Threshold = INFO
log4j.appender.DEFINE1.layout = org.apache.log4j.PatternLayout
log4j.appender.DEFINE1.layout.ConversionPattern = %t  %d{yyyy-MM-dd HH:mm:ss,SSS}  %l  %M  %5p  %m%n

### DEFINE2 ###
log4j.appender.DEFINE2=org.apache.log4j.DailyRollingFileAppender
log4j.appender.DEFINE2.File=logs/innovate.service.log
log4j.appender.DEFINE2.DatePattern = '.'yyyy-MM-dd'.log'
log4j.appender.DEFINE2.Threshold = INFO
log4j.appender.DEFINE2.layout = org.apache.log4j.PatternLayout
log4j.appender.DEFINE2.layout.ConversionPattern = %t  %d{yyyy-MM-dd HH:mm:ss,SSS}  %l  %M  %5p  %m%n

### DEFINE3 ###
log4j.appender.DEFINE3=org.apache.log4j.DailyRollingFileAppender
log4j.appender.DEFINE3.File=logs/innovate.web.log
log4j.appender.DEFINE3.DatePattern = '.'yyyy-MM-dd'.log'
log4j.appender.DEFINE3.Threshold = INFO
log4j.appender.DEFINE3.layout = org.apache.log4j.PatternLayout
log4j.appender.DEFINE3.layout.ConversionPattern = %t  %d{yyyy-MM-dd HH:mm:ss,SSS}  %l  %M  %5p  %m%n


### DEFINE4 ###
log4j.appender.DEFINE4=org.apache.log4j.DailyRollingFileAppender
log4j.appender.DEFINE4.File=logs/innovate.web.log
log4j.appender.DEFINE4.DatePattern = '.'yyyy-MM-dd'.log'
log4j.appender.DEFINE4.Threshold = INFO
log4j.appender.DEFINE4.layout = org.apache.log4j.PatternLayout
log4j.appender.DEFINE4.layout.ConversionPattern = %t  %d{yyyy-MM-dd HH:mm:ss,SSS}  %l  %M  %5p  %m%n


### IBATIS ###
log4j.appender.IBATIS = org.apache.log4j.DailyRollingFileAppender
log4j.appender.IBATIS.File = logs/ibatis.log
log4j.appender.IBATIS.DatePattern = '.'yyyy-MM-dd'.log'
log4j.appender.IBATIS.Threshold = DEBUG
log4j.appender.IBATIS.layout = org.apache.log4j.PatternLayout
log4j.appender.IBATIS.layout.ConversionPattern = %t  %d{yyyy-MM-dd HH:mm:ss,SSS} %5p  %m%n



#-----------------------------------------------------------------------------------
########日志级别
###all<debug < info < warn < error < fatal<off
###优先级从高到低分别是ERROR、WARN、INFO、DEBUG
############参数说明：
#org.apache.log4j.ConsoleAppender（控制台），
#org.apache.log4j.FileAppender（文件），
#org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），
#org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），
#org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）
#指定日志输出格式
#org.apache.log4j.HTMLLayout（以HTML表格形式布局），
#org.apache.log4j.PatternLayout（可以灵活地指定布局模式），
#org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），
#org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）
#打印参数: Log4J采用类似C语言中的printf函数的打印格式格式化日志信息
#%m   输出代码中指定的消息
#%p   输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
#%r   输出自应用启动到输出该log信息耗费的毫秒数
#%c   输出所属的类目，通常就是所在类的全名
#%t   输出产生该日志事件的线程名
#%n   输出一个回车换行符，Windows平台为“/r/n”，Unix平台为“/n”
#%d   输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss ,SSS}，输出类似：2002年10月18日  22 ： 10 ： 28 ， 921
#%l   输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java: 10 )